openapi: 3.0.0
info:
  version: 0.1.0
  title: RAPTR Order API
  description:
    The endpoints listed in this API have been created to facilitate the new launcher
servers:
  - url: https://localhost/raptr/api/stjude/v2
    description: Development
tags:
  - name: Analysis Run
  - name: Bam
  - name: Bam Pair
  - name: Order
  - name: Order Subject
  - name: Project
  - name: Read Group
  - name: Sample
  - name: Source
  - name: Subject
  - name: Suite
  - name: Target
  - name: Tartan
paths:
  /anls_run:
      summary: Analysis Run
      description: Actions related to analysis runs
      get:
        summary: List Analysis Runs
        description: List all or a filtered subset of Analysis Runs
        tags:
          - Analysis Run
        parameters:
          - $ref: '#/components/parameters/anls_type_name'
          - $ref: '#/components/parameters/formal_name'
          - $ref: '#/components/parameters/target_name'
          - $ref: '#/components/parameters/project_name'
          - $ref: '#/components/parameters/subproject'
        responses:
          200:
            description: An array of Analysis Run records
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/Success'
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/PendingAnlsRun'
          401:
              $ref: '#/components/responses/401'
      post:
        summary: Create Analysis Run
        description: Create a new Analysis Run record
        tags:
          - Analysis Run
        requestBody:
          $ref: '#/components/requestBodies/AnlsRunCreate'
        responses:
          201:
            description: The newly created Analysis Run record
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/Success'
                  properties:
                    data:
                      $ref: '#/components/schemas/PendingAnlsRun'
                    returnCode:
                      example: 201
          400:
            $ref: '#/components/responses/400'
          401:
            $ref: '#/components/responses/401'
  /anls_run/{anls_run_id}/status:
    parameters:
      - $ref: '#/components/parameters/anls_run_id'
    post:
      summary: Set Analysis Run Item status
      tags:
        - Analysis Run
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                current_status_code:
                  description: The code for the current status of items in the AnlsRun
                  example: I
                  type: string
                new_status_code:
                  description: The code for the status to set for items in the AnlsRun
                  example: L
                  type: string
                notify:
                  description: A flag used to indicate whether or not to send notifications related to this status update
                  example: true
                  default: true
                  type: boolean
                message:
                  description: An additional message to be appended to notifications about the requested status update
                  example: An example message
                  type: string
                strict:
                  description: A flag for switching between strict updates or piecemeal updates. When true, if any item for the run has a different status, the request will fail. When false, only items with the indicated status will be updated.
                  default: true
                  example: true
                  type: boolean
              required:
                - current_status_code
                - new_status_code
      responses:
        200:
          description: Status successfully updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AnlsRunItem'
                  success:
                    example: Analysis Run Item status updated successfully
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
  /anls_run/{anls_run_id}/tartan:
    get:
      summary: Show AnlsRun's Tartan
      description: Returns the Tartan record associated with the Analysis Run
      tags:
        - Analysis Run
        - Tartan
      responses:
        200:
          description: The Tartan associated with the Analysis Run
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Tartan'
    post:
      summary: Set Tartan for Analysis Run
      description: Update the Tartan associated with the Analysis Run
      tags:
        - Analysis Run
        - Tartan
      responses:
        200:
          description: Tartan successfuly updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/AnlsRun'
                    properties:
                      tartan:
                        $ref: '#/components/schemas/Tartan'
  /anls_run/pending:
      get:
        summary: Pending Analysis Runs
        description: Get pending runs
        tags:
          - Analysis Run
        parameters:
          - name: anls_type_name
            description: The name of the analysis type to narrow the list to
            in: path
            required: true
            example: coverage-post
            schema:
              type: string
          - $ref: '#/components/parameters/formal_name'
          - $ref: '#/components/parameters/target_name'
          - $ref: '#/components/parameters/project_name'
          - $ref: '#/components/parameters/subproject'
          - $ref: '#/components/parameters/tartan_identifier'

        responses:
          200:
            description: A list of anls_runs that are pending
            content:
              application/json:
                schema:
                  allOf:
                    - $ref: '#/components/schemas/Success'
                    - $ref: '#/components/schemas/Paginated'
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/PendingAnlsRun'
          401:
            $ref: '#/components/responses/401'
  /bam:
    get:
      summary: List Bams
      description:
        List all Bams or optionally filter Bams based on project, sample, or
        target
      tags:
        - Bam
      parameters:
        - $ref: '#/components/parameters/project_name'
        - $ref: '#/components/parameters/subproject'
        - $ref: '#/components/parameters/sample_name'
        - $ref: '#/components/parameters/target_name'
        - name: qualifier
          description:
            The string used to separate this Bam from others sharing its sample,
            target, and project.
          example: '-'
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: List Bams
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Paginated'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Bam'
    post:
      summary: Create Bam
      tags:
        - Bam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                anls_type_name:
                  $ref: '#/components/schemas/anls_type_name'
                project_name:
                  $ref: '#/components/schemas/project_name'
                subproject:
                  $ref: '#/components/schemas/subproject'
                sample_name:
                  $ref: '#/components/schemas/sample_name'
                target_name:
                  $ref: '#/components/schemas/target_name'
                qualifier:
                  description:
                    A string used to separate a Bam from other Bams that share
                    the same sample, target, and project
                  example: '-'
                  type: string
              required:
                - project_name
                - subproject
                - sample_name
                - target_name
      responses:
        201:
          description: Bam created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Bam'
  /bam/{bam_id}:
    get:
      summary: Show Bam
      tags:
        - Bam
      responses:
        200:
          description: Show Bam
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Bam'
  /bam/{bam_id}/status:
    post:
      summary: Update Bam Status
      tags:
        - Bam
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  enum: ['Normal', 'Pending', 'QCFailed', 'Waiting']
      responses:
        200:
          description: Status Updated Successfully
  /bam_pair:
    get:
      summary: List Bam Pairs
      description:
        List all available BamPairs or optionally filter by one of the values shown
        in the request body below.
      tags:
        - Bam Pair
      parameters:
        - name: case_bam_id
          description: The id for the case Bam of the Bam Pair
          example: 123456
          in: query
          required: false
          schema:
            type: integer
        - name: control_bam_id
          description: The id for the control Bam of the Bam Pair
          example: 123456
          in: query
          required: false
          schema:
            type: integer
        - name: qualifier
          description:
            The string used to separate this Bam Pair from others sharing its
            case and control Bams
          example: '-'
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: List Bams
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Paginated'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BamPair'
    post:
      summary: Create BamPair
      tags:
        - Bam Pair
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                case_bam_id:
                  example: 123456
                  type: integer
                control_bam_id:
                  example: 123456
                  type: integer
                notes:
                  type: string
                qualifier:
                  example: '-'
                  type: string
      responses:
        200:
          description: Bam Pair Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/BamPair'
  /bam_pair/{bam_pair_id}:
    get:
      summary: Show Bam Pair
      tags:
        - Bam Pair
      responses:
        200:
          description: Show BamPair
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/BamPair'
  /bam_pair/{bam_pair_id}/status:
    post:
      summary: Update Bam Pair Status
      tags:
        - Bam Pair
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/BamPairStatus'
      responses:
        200:
          description: Update Bam PairStatus
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/BamPair'
  /order:
    get:
      summary: List Orders
      tags:
        - Order
      parameters:
        - $ref: '#/components/parameters/project_name'
        - $ref: '#/components/parameters/subproject'
        - $ref: '#/components/parameters/suite_name'
        - $ref: '#/components/parameters/username'
      responses:
        200:
          description: All Orders
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Paginated'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
    post:
      summary: Create Order
      description: Create a new Order
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                anls_type_name:
                  $ref: '#/components/schemas/anls_type_name'
                project_name:
                  $ref: '#/components/schemas/project_name'
                subproject:
                  $ref: '#/components/schemas/subproject'
                suite_name:
                  $ref: '#/components/schemas/suite_name'
                target_name:
                  $ref: '#/components/schemas/target_name'
                notes:
                  type: string
                allow_auto_pairing:
                  description:
                    A boolean value indicating whether Bam Pairs should be
                    auto-generated for the Bams added as part of this request.
                  default: false
                  type: boolean
                advance_to_normal:
                  description:
                    A boolean value indicating whether the Order should be
                    advanced to the Normal status after being created.
                  default: false
                  type: boolean
                bams:
                  description: Bam records that should be created for the Order
                  items:
                    type: object
                    properties:
                      project_name:
                        $ref: '#/components/schemas/project_name'
                      subproject:
                        $ref: '#/components/schemas/subproject'
                      sample_name:
                        $ref: '#/components/schemas/sample_name'
                      target_name:
                        $ref: '#/components/schemas/target_name'
                        type: string
                      notes:
                        type: string
                      qualifier:
                        type: string
                    required:
                      - sample_name
                      - target_name
                  type: array
              required:
                - project_name
                - subproject
                - suite_name
                - target_name
      responses:
        201:
          description: The newly created Order
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
  /order/{order_id}:
    parameters:
      - $ref: '#/components/parameters/order_id_path'
    get:
      summary: Show Order
      tags:
        - Order
      responses:
        200:
          description: Show Order
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
  /order/{order_id}/bam:
    parameters:
      - $ref: '#/components/parameters/order_id_path'
    post:
      summary: Add Bams to Order
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  project_name:
                    $ref: '#/components/schemas/project_name'
                  subproject:
                    $ref: '#/components/schemas/subproject'
                  sample_name:
                    $ref: '#/components/schemas/sample_name'
                  target_name:
                    $ref: '#/components/schemas/target_name'
                    type: string
                  notes:
                    $ref: '#/components/schemas/notes'
                  qualifier:
                    type: string
                required:
                  - sample_name
                  - target_name
      responses:
        201:
          description: Bam Added
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Order'
                    properties:
                      bams:
                        type: array
                        items:
                          $ref: '#/components/schemas/Bam'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
  /order/{order_id}/bam_pair:
    parameters:
      - $ref: '#/components/parameters/order_id_path'
    post:
      summary: Add Bam Pairs to Order
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  case_bam_id:
                    $ref: '#/components/schemas/case_bam_id'
                  control_bam_id:
                    $ref: '#/components/schemas/control_bam_id'
                  notes:
                    $ref: '#/components/schemas/notes'
                  qualifier:
                    type: string
                required:
                  - case_bam_id
                  - control_bam_id
      responses:
        201:
          description: Bam Added
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Order'
                    properties:
                      bams:
                        type: array
                        items:
                          $ref: '#/components/schemas/Bam'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        404:
          $ref: '#/components/responses/404'
  /order/{order_id}/status:
    parameters:
      - $ref: '#/components/parameters/order_id_path'
    post:
      summary: Update Order Status
      tags:
        - Order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  description: The new status to apply to the Order
                  $ref: "#/components/schemas/OrderStatus"
              required:
                - status
      responses:
        200:
          description: Order Status Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Order'
  /project:
    get:
      summary: List Projects
      description:
        List all samples or optionally filter by name, subproject, and/or the
        username of the project lead.
      tags:
        - Project
      parameters:
        - $ref: '#/components/parameters/project_name'
        - $ref: '#/components/parameters/subproject'
        - $ref: '#/components/parameters/username'
      responses:
        200:
          description: All Samples
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Paginated'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
    post:
      summary: Create Project
      tags:
        - Project
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                project_name:
                  $ref: '#/components/schemas/project_name'
                subproject:
                  $ref: '#/components/schemas/subproject'
                notes:
                  type: string
                username:
                  $ref: '#/components/schemas/username'
                tartan_identifier:
                  $ref: '#/components/schemas/tartan_identifier'
      responses:
        201:
          description: Project created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
  /project/{project_name}/{subproject}:
    parameters:
      - $ref: '#/components/parameters/project_name_path'
      - $ref: '#/components/parameters/subproject_path'
    get:
      summary: Show Project
      tags:
        - Project
      responses:
        200:
          description: Show Project
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
  /project/{project_name}/{subproject}/tartan:
    parameters:
      - $ref: '#/components/parameters/project_name_path'
      - $ref: '#/components/parameters/subproject_path'
    get:
      summary: Show Tartan for Project
      tags:
        - Project
        - Tartan
      responses:
        200:
          description: The TARTan the Project is associated with
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Tartan'
    post:
      summary: Update Tartan for Project
      tags:
        - Project
        - Tartan
      responses:
        200:
          description: Tartan updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Project'
                    properties:
                      tartan:
                        $ref: '#/components/schemas/Tartan'
  /read_group:
    get:
      summary: List Read Groups
      tags:
        - Read Group
      parameters:
        - $ref: '#/components/parameters/project_name'
        - $ref: '#/components/parameters/subproject'
        - $ref: '#/components/parameters/sample_name'
        - $ref: '#/components/parameters/read_group_status'
        - $ref: '#/components/parameters/target_name'
      responses:
        200:
          description: List Read Groups
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Paginated'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReadGroup'
    post:
      summary: Create Read Group
      tags:
        - Read Group
      responses:
        201:
          description: Read Group Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/ReadGroup'
  /read_group/{read_group_id}:
    get:
      summary: Show Read Group
      tags:
        - Read Group
      responses:
        200:
          description: Read Group Details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/ReadGroup'
    patch:
      summary: Update Read Group
      tags:
        - Read Group
      responses:
        201:
          description: Read Group Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/ReadGroup'
  /sample:
    get:
      summary: List Samples
      tags:
        - Sample
      parameters:
        - name: disease_code
          description: A short code to denote the disease that applies to the Sample
          in: query
          required: false
          schema:
            type: string
        - name: formal_name
          description: The name given to the Sample at registration
          in: query
          required: false
          schema:
            type: string
        - name: pi_name
          description:
            A secondary identifier for the Sample, usually the name assigned to
            it by its registering lab or the name of the cell-line from which
            the Sample originates
          in: query
          required: false
          schema:
            type: string
        - name: lab_name
          description:
            The long-form name given to the Sample at registration, which follows
            the format {formal_name}-{pi_name}
          in: query
          required: false
          schema:
            type: string
        - name: sample_type
          description:
            A single letter used to show which type the Sample falls into. Examples
            include D (Diagnosis) and G (Germline)
          in: query
          schema:
            $ref: '#/components/schemas/sample_type'
        - name: subject_name
          description: The name of the Subject the Sample was derived from
          in: query
          schema:
            type: string
      responses:
        200:
          description: All Samples
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Paginated'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Sample'
    post:
      summary: Create Sample
      tags:
        - Sample
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject_name:
                  type: string
                disease_code:
                  type: string
                pi_name:
                  type: string
                sample_type:
                  $ref: '#/components/schemas/sample_type'
              required:
                - subject_id
                - disease_code
                - pi_name
                - sample_type
      responses:
        201:
          description: Sample Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Sample'
  /sample/{sample_name}:
    parameters:
      - name: sample_name
        description: The name of the Sample being requested
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Show Sample
      tags:
        - Sample
      responses:
        200:
          description: Show Sample
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Sample'
    patch:
      summary: Update Sample
      tags:
        - Sample
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subject_name:
                  type: string
                disease_code:
                  description: A short code used to denote a particular disease
                  type: string
                pi_name:
                  type: string
                sample_type:
                  $ref: '#/components/schemas/sample_type'
      responses:
        200:
          description: Sample Updated
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Sample'
  /sample/{sample_name}/synonym:
    parameters:
      - name: sample_id
        description: The name of the Sample the request is for
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Add Sample Synonym
      tags:
        - Sample
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                source:
                  description: The source or type of synonym being added
                  example: SJUID
                  type: string
                synonym:
                  description: The value of the synonym to be added
                  type: string
              required:
                - source
                - synonym
      responses:
        201:
          description: Sample Synonym Added
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Sample'
  /source:
    get:
      summary: List Sources
      tags:
        - Source
      responses:
        200:
          description: List Sources
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Paginated'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Source'
    post:
      summary: Create Source
      tags:
        - Source
      responses:
        201:
          description: Source Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Source'
  /subject:
    get:
      summary: List Subjects
      tags:
        - Subject
      parameters:
        - name: name
          description: The name given to the Subject when it was created
          in: query
          required: false
          schema:
            type: string
        - name: organism_name
          description: The name for the type of Organism the Suject is
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: List Subjects
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Paginated'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Subject'
    post:
      summary: Create Subject
      tags:
        - Subject
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organism_name:
                  type: string
              required:
                - organism_id
      responses:
        201:
          description: Subject created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Subject'
  /subject/{subject_name}:
    parameters:
      - name: subject_name
        description: The name of the Subject the request is for
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Show Subject
      tags:
        - Subject
      responses:
        200:
          description: Show Subject
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                properties:
                  data:
                    $ref: '#/components/schemas/Subject'
  /suite:
    get:
      summary: List Suites
      tags:
        - Suite
      responses:
        200:
          description: All Suites
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Paginated'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Suite'
  /target:
    get:
      summary: List Targets
      tags:
        - Target
      responses:
        200:
          description: An array of all available targets
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Paginated'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Target'
  /tartan:
    get:
      summary: List TARTans
      tags:
        - Tartan
      responses:
        200:
          description: Available TARTans
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Success'
                  - $ref: '#/components/schemas/Paginated'
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tartan'
components:
  examples:
    error-bad-request:
      summary: Bad request
      value:
        errors:
          - One or more required parameters were not included
        returnCode: 400
    error-not-authenticated:
      summary: Unauthorized
      value:
        errors:
          - Credentials not provided or invalid
        returnCode: 401
    error-not-authorized:
      summary: Forbidden
      value:
        errors:
          - Authenticated user not authorized for this action
        returnCode: 403
    error-not-found:
      summary: Resource not found
      value:
        errors:
          - Resource could not be found
        returnCode: 404
    error-conflict:
      summary: Conflict
      value:
        errors:
          - Action could not be completed because of a conflict in the current state of the resouce
        returnCode: 409
  parameters:
    anls_run_id:
      in: path
      description: The primary key used to uniquely identify an anls_run record
      example: 123456
      name: anls_run_id
      required: true
      schema:
        type: integer
    anls_type_name:
      in: query
      name: anls_type_name
      schema:
        $ref: '#/components/schemas/anls_type_name'
    formal_name:
      in: query
      name: formal_name
      schema:
        $ref: '#/components/schemas/sample_name'
    order_id_path:
        name: order_id
        description:
          A unique numeric identifier for an Order
        example: 123456
        in: path
        required: true
        schema:
          type: integer
    project_name:
      in: query
      name: project_name
      schema:
        $ref: '#/components/schemas/project_name'
    project_name_path:
      in: path
      name: project_name
      required: true
      schema:
        $ref: '#/components/schemas/project_name'
    read_group_status:
      in: query
      name: status
      required: false
      schema:
        $ref: '#/components/schemas/read_group_status'
    sample_name:
      description: The name of the Sample the Bam is associated with
      in: query
      name: sample_name
      required: false
      schema:
        $ref: '#/components/schemas/sample_name'
    subproject:
      in: query
      name: subproject
      schema:
        $ref: '#/components/schemas/subproject'
    subproject_path:
      in: path
      name: subproject
      required: true
      schema:
        $ref: '#/components/schemas/subproject'
        type: string
    suite_name:
      name: suite_name
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/suite_name'
    target_name:
      in: query
      name: target_name
      schema:
        $ref: '#/components/schemas/target_name'
    tartan_identifier:
      in: query
      name: tartan_identifier
      schema:
        $ref: '#/components/schemas/tartan_identifier'
    username:
      in: query
      name: username
      required: false
      schema:
        $ref: '#/components/schemas/username'
  requestBodies:
    AnlsRunCreate:
      content:
        application/json:
          schema:
            type: object
            properties:
              formal_name:
                $ref: '#/components/schemas/sample_name'
              target_name:
                $ref: '#/components/schemas/target_name'
              project_name:
                $ref: '#/components/schemas/project_name'
              subproject:
                $ref: '#/components/schemas/subproject'
              anls_type_name:
                $ref: '#/components/schemas/anls_type_name'
            required:
              - formal_name
              - target_name
              - project_name
              - subproject
              - anls_type_name
    AnlsRunUpdate:
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/AnlsRunRequestBody'
            properties:
              anls_run_id:
                description: The primary key of the requested Analysis Run
                type: integer
            required:
              - anls_run_id
    Sample:
      description: The standard request body for creating or updating a Sample
      content:
        application/json:
          schema:
            type: object
            properties:
              subject_id:
                example: 123456
                type: integer
              disease_code:
                description: A short code used to denote a particular disease
                type: string
              pi_name:
                type: string
              sample_type:
                $ref: '#/components/schemas/sample_type'
  responses:
    400:
      description: Bad request
      content:
        application/json:
          examples:
            error-not-authenticated:
              $ref: '#/components/examples/error-bad-request'
          schema:
            $ref: '#/components/schemas/Error'
    401:
      description: User not authenticated
      content:
        application/json:
          examples:
            error-not-authenticated:
              $ref: '#/components/examples/error-not-authenticated'
          schema:
            $ref: '#/components/schemas/Error'
    403:
      description: User not authorized
      content:
        application/json:
          examples:
            error-not-authenticated:
              $ref: '#/components/examples/error-not-authorized'
          schema:
            $ref: '#/components/schemas/Error'
    404:
      description: Resource could not be found
      content:
        application/json:
          examples:
            404:
              $ref: '#/components/examples/error-not-found'
          schema:
            $ref: '#/components/schemas/Error'
    409:
      description: Conflict
      content:
        application/json:
          examples:
            404:
              $ref: '#/components/examples/error-conflict'
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    AnlsRun:
      type: object
      description: An analysis run object
      properties:
        anls_run_id:
          type: integer
          description: A unique numeric identifier for an analysis run
          example: 123456
        anls_type_id:
          type: integer
          description: The unique identifier for the type of analysis this run is for
          example: 123456
        name:
          type: string
          description: A randomized alphanumeric name for the analysis run
          example: aBc123
        is_complete:
          type: boolean
          description: A boolean flag denoting whether an analysis run is complete or not
          example: false
        archive_code:
          type: string
          description: The string code for the archive status of the record
        notes:
          type: string
          description: Notes that have been added to the record
        anls_type:
          $ref: '#/components/schemas/AnlsType'
        items:
          type: array
          items:
            $ref: '#/components/schemas/AnlsRunItem'
    AnlsRunRequestBody:
        type: object
        properties:
          anls_type_id:
            description: The primary key of the Analysis Type that applies to the run
            type: integer
          archive_code:
            default: N
            description: The code for an Archive Status record
            type: string
          is_complete:
            default: false
            description: A boolean flag indicating whether or not an Analysis Run has completed
            type: boolean
          name:
            default: null
            description: A unique name to be used as the name for this run. It is best to leave this null unless a specific name is needed
            type: string
          notes:
            default: null
            description: Notes that apply to the Analysis Run object
            type: string
    PendingAnlsRun:
      type: object
      description: An analysis run object formatted specifically for the getPendingAnlsRuns endpoint
      properties:
        anls_run_id:
          type: integer
          description: A unique identifier for an analysis run
          example: 123456
        anls_run_name:
          type: string
          description: The randomly generated name of the run
          example: 0XEp4VgW
        anls_type_name:
          type: string
          description: The string name of the type of analysis that was/is to be run
          example: coverage-post
        is_complete:
          type: boolean
          description: A value indicating whether the run has completed or not
          example: false
        anls_run_items:
          type: array
          items:
            $ref: '#/components/schemas/PendingAnlsRunItem'
    AnlsRunItem:
      type: object
      allOf:
        - $ref: '#/components/schemas/Item'
      properties:
        status_id:
          type: integer
          description: A unique numeric identifier for a status
          example: 123456
        begin_date:
          type: string
          description: The timestamp for when work on this item began
          example: '1970-01-01 00:00:00'
        end_date:
          type: string
          description: The timestamp for when work on this item concluded
          example: '1970-01-01 00:00:00'
        assignee:
          type: string
          description: The username of the person who was assigned work for this item
          example: guest
        is_most_recent:
          type: boolean
          description: A boolean flag indicating if this item is the most recent
          example: true
    PendingAnlsRunItem:
      type: object
      description: A single item associated with an analysis run
      properties:
        anls_run_item_id:
          type: integer
          description: The unique identifier for the record
          example: 123456
        status_code:
          type: string
          description: The string code for the current status of the item
          example: I
        is_most_recent:
          type: boolean
          description: A flag indicating whether the item is the most recent of its kind
          example: true
        project_name:
          $ref: '#/components/schemas/project_name'
        subproject:
          $ref: '#/components/schemas/subproject'
        formal_name:
          $ref: '#/components/schemas/sample_name'
        genome:
          type: string
          description: The name of the genome set for this item
          example:
      oneOf:
        - $ref: '#/components/schemas/PendingAnlsRunItemBam'
        - $ref: '#/components/schemas/PendingAnlsRunItemBamPair'
        - $ref: '#/components/schemas/PendingAnlsRunItemOrderSubject'
        - $ref: '#/components/schemas/PendingAnlsRunItemReadGroup'
    PendingAnlsRunItemBam:
      type: object
      description: The properties for a pending AnlsRunItem that is for a Bam
      properties:
        bam_qualifier:
          type: string
          description: A string qualifier for a BAM
          example: '-'
        bam_id:
          type: integer
          description: The primary key for the associated Bam record
          example: 123456
    PendingAnlsRunItemBamPair:
      type: object
      description: The properties associated with a bam_pair for a pending AnlsRunItem
      properties:
        bam_pair_qualifier:
          type: string
          description: A string qualifier for a BAM pair
          example: '-'
        bam_pair_id:
          type: integer
          description: The primary key of the associated BamPair record
        item_type:
          type: string
          description: The type of item this record is for
          example: bam_pair
    PendingAnlsRunItemOrderSubject:
      type: object
      description: The properties associated with an order_subject for a pending AnlsRunItem
      properties:
        order_subject_id:
          type: integer
          description: The primary key for the order_subject associated with the AnlsRunItem
          example: 123456
        order_code:
          type: integer
          example: 123456
        item_type:
          type: string
          description: The type of item this record is for
          example: order_subject
    PendingAnlsRunItemReadGroup:
      type: object
      properties:
        read_group_id:
          type: integer
          description: The primary key for a read_group
          example: 123456
        rg_label:
          type: string
        item_type:
          type: string
          description: The type of item this record is for
          example: read_group
    AnlsType:
      type: object
      properties:
        anls_type_id:
          description: The primary key of the AnlsType record
          example: 123456
          type: integer
        bam_pair_role:
          description: Which of the two Bams in a Bam Pairthe AnlsType is intended for
          example: case
          type: string
        blt_item_type:
          description: The type of BLT item (bam, bam_pair, etc) the AnlsType runs on
          example: bam
          type: string
        description:
          type: string
        is_combable:
          description: Whether or not the AnlsType should be combed
          type: boolean
        is_mapper:
          description: Whether or not the AnlsType is a mapping AnlsType
          type: boolean
        name:
          type: string
        ordinal:
          description: A numeric value used mainly to order AnlsTypes in output
          example: 1
          type: integer
    Bam:
      type: object
      properties:
        bam_id:
          example: 123456
          type: integer
        anls_type_id:
          example: 123456
          type: integer
        gedi_source_id:
          example: 123456
          type: integer
        genome_id:
          example: 123456
          type: integer
        sample_target_project_id:
          example: 123456
          type: integer
        qualifier:
          example: '-'
          type: string
        notes:
          example: Some note
          type: string
        status:
          $ref: '#/components/schemas/BamStatus'
    BamStatus:
      type: string
      description: A value indicating the status of a particular Bam record
      default: Pending
      enum:
        - Failed
        - Pending
        - Normal
        - QcFailed
        - Obsolete
        - Waiting
    BamPair:
      type: object
      properties:
        bam_pair_id:
          description: The primary key used to uniquely identify the BamPair
          example: 123456
          type: integer
        case_bam_id:
          description: The id for the case Bam
          example: 123456
          type: integer
        control_bam_id:
          description: The id for the control Bam
          example: 123456
          type: integer
        notes:
          type: string
        qualifier:
          description: A string value used to allow for multiple BamPairs, usually '-'
          example: '-'
          type: string
        status:
          $ref: '#/components/schemas/BamPairStatus'
    BamPairStatus:
      type: string
      enum:
        - 'Normal'
        - 'Obsolete'
        - 'Special'
    Center:
      type: object
      properties:
        center_id:
          type: integer
          description: A unique numerical identifier for the record
          example: 123456
        name:
          type: string
          description: The name of the center
        official_name:
          type: string
          description: The official name of the center
    DiseaseCode:
      type: object
      properties:
        disease_code_id:
          type: integer
          description: A unique numeric identifier for the record
          example: 123456
        disease_code:
          $ref: '#/components/schemas/disease_code'
        disease_name:
          type: string
          description: The full name of the disease
        deprecated:
          type: boolean
          description: A boolean flag indicating whether or not the disease code has been deprecated
          example: false
    Genome:
      type: object
      properties:
        genome_id:
          type: integer
          description: A unique numerical identifier for the record
        organism_id:
          type: integer
          description: The primary key of the Organism record the Genome is for
        name:
          $ref: '#/components/schemas/genome_name'
        is_usable:
          type: boolean
          description: A flag indicating whether or not the Genome can be used for mapping/analysis
        organism:
          $ref: '#/components/schemas/Organism'
    Item:
        type: object
        description: A generic item record that can point to one of any type of items (e.g., BAM)
        properties:
          item_id:
            type: integer
            description: A unique numerical identifier
            example: 123456
          is_active:
            type: boolean
            example: true
          blt_item_type:
            type: string
            description: A string identifier for the type of item this record is for
            example: bam
          blt_item_id:
            type: integer
            description: An numerical identifier that is unique for the associated item type table but not necessarily unique for this table
            example: 123456
          case_subject_id:
            type: integer
            description: A unique numerical identifier for a subject record
            example: 123456
          blt_item:
            type: object
            oneOf:
              - $ref: '#/components/schemas/Bam'
              - $ref: '#/components/schemas/BamPair'
              - $ref: '#/components/schemas/OrderSubject'
              - $ref: '#/components/schemas/ReadGroup'
    Order:
      type: object
      properties:
        order_id:
          example: 123456
          type: integer
        project_id:
          example: 123456
          type: integer
        suite_id:
          example: 123456
          type: integer
        analyst_assigned_to:
          example: username
          type: string
        germline_reviewer_assigned_to:
          type: string
        notes:
          type: string
        ord_code:
          description: A secondary identifier for Order records
          example: 123456
          type: integer
        pathologist_assigned_to:
          type: string
        source:
          type: string
        source_type:
          type: string
        status:
          $ref: '#/components/schemas/OrderStatus'
        username:
          type: string
        suite:
          $ref: '#/components/schemas/Suite'
    OrderStatus:
      type: string
      example: normal
      enum: 
        - 'canceled'
        - 'complete'
        - 'draft'
        - 'hold'
        - 'normal'
    OrderSubject:
      type: object
      properties:
        order_subject_id:
          type: integer
          description: A unique numeric identifier for the record
          example: 123456
        order_id:
          type: integer
          description: The primary key of the order associated with this record
          example: 123456
        subject_id:
          type: integer
          description: The primary key of the subject associated with this record
          example: 123456
    Organism:
      type: object
      description: A type of living creature for which analyses may be performed
      properties:
        organism_id:
          type: integer
          description: A unique numeric identifier for the record
        name:
          type: string
          description: The name used to identify the Organism
        genus:
          type: string
          description: The genus of the Organism
          example: Homo
        species:
          type: string
          description: The species of the Organism
          example: sapien
    Person:
      type: object
      description: A person (or user) registered to use the RAPTR web application or API
      properties:
        person_id:
          type: integer
          description: A unique numerical identifier for a person
          example: 123456
        username:
          type: string
          description: A unique string used to identify a person in a more human readable format
          example: guest
        name:
          type: string
          description: The full name of the person for which this record was created
          example: Thomas Smith
        email:
          type: string
          description: The email address this user can be reached via
          example: Fake.Person@stjude.org
    Project:
      type: object
      properties:
        project_id:
          description: The primary key of the Project record
          example: 123456
          type: integer
        default_tartan_id:
          description: A foreign key indicating which TARTan the project exists in
          example: 1
          type: integer
        description:
          type: string
        name:
          $ref: '#/components/schemas/project_name'
        subproject:
          $ref: '#/components/schemas/subproject'
        notes:
          type: string
        username:
          description: The username of the primary investigator listed on the project
          type: string
    ReadGroup:
      type: object
      properties:
        read_group_id:
          description: The primary key of the Read Group record
          example: 123456
          type: integer
        project_id:
          description: The primary key of the Project the Read Group is associated with
          example: 123456
          type: integer
        sample_target_id:
          type: integer
        source_id:
          type: integer
        rg_label:
          type: string
        status:
          type: string
        notes:
          type: string
        pl:
          type: string
        pu:
          type: string
        dt:
          type: string
        sm:
          type: string
        lb:
          type: string
    Sample:
      type: object
      properties:
        sample_id:
          description: THe primary key of the Sample record
          example: 1
          type: integer
        subject_id:
          description: A foreign key pointing to the Sample's Subject
          example: 1
          type: integer
        disease_code:
          $ref: '#/components/schemas/disease_code'
        formal_name:
          $ref: '#/components/schemas/sample_name'
        pi_name:
          $ref: '#/components/schemas/pi_name'
        lab_name:
          $ref: '#/components/schemas/lab_name'
        replaced_by:
          description: If not null, the sample_id of the Sample that has replaced this Sample
          example: 123456
          type: integer
        sample_index:
          description: An index value incremented to differentiate between Samples of the same type
          example: 1
          type: integer
        sample_type:
          $ref: '#/components/schemas/sample_type'
    Source:
      type: object
    Subject:
      type: object
      properties:
        subject_id:
          description: The primary key that uniquely identifies the Subject
          example: 123456
          type: integer
        organism_id:
          description: The id for the Organism the Subject is
          example: 123456
          type: integer
        name:
          description: The name of the Subject
          type: string
        synonyms:
          type: string
    Suite:
      type: object
      properties:
        suite_id:
          description: The primary key of the Suite record
          example: 123456
          type: integer
        genome_id:
          example: 123456
          type: integer
        description:
          description: A description of the suite and its purpose
          type: string
        name:
          description: The name assigned to the suite
          type: string
        is_default:
          description: A flag indicating whether or not the Suite is a default suite
          type: boolean
    Target:
      type: object
      properties:
        target_id:
          description: The primary key of the Target record
          example: 123456
          type: integer
        analyte:
          example: DNA
          type: string
        description:
          example: Whole genome sequencing
          type: string
        name:
          description: The name of the Target
          example: WHOLE_GENOME
          type: string
        seq_type:
          description: The sequencing type for the Target
          example: WHOLEGENOME
          type: string
    Tartan:
      description: A named instance of TARTan
      type: object
      properties:
        tartan_id:
          type: integer
          example: 1
        instance_identifier:
          type: string
          example: central
    # Individual field descriptions
    anls_type_name:
      description: The name of the analysis type to be performed
      example: intake
      type: string
    bam_id:
      description: The primary key for a Bam record
      example: 1
      type: integer
    case_bam_id:
      description: The primary key of a Bam to use as the case Bam for a Bam Pair
      oneOf:
        - $ref: '#/components/schemas/bam_id'
    control_bam_id:
      description: The primary key of a Bam to use as the control Bam for a Bam Pair
      oneOf:
        - $ref: '#/components/schemas/bam_id'
    disease_code:
      description: A short code used to indicate a disease
      example: NORM
      type: string
    genome_name:
      description: The name used for the genome
      example: GRCh37-lite
      type: string
    lab_name:
      description: The combination of a Sample's name and its secondary identifier
      example: SJNORM012345_D1-sample1
      type: string
    notes:
      description: Notes to add to the record
      type: string
    pi_name:
      description: A secondary identifier for a Sample
      example: sample1
      type: string
    project_name:
      description: The primary name of a project, often the name of a PI or a large project
      example: PCGP
      type: string
    read_group_status:
      description: A string indicating the status of a Read Group
      enum:
        - Normal
        - Failed
        - Pending
        - UnknownSample
        - QcFailed
      type: string
    sample_name:
      description:
        The name of a Sample. This value is the combination of several fields in
        the Sample schema in the following format
        SJ{disease_code}{subject_name (number only)}_{sample_type}{sample_index}
      example: SJNORM012345_D1
      type: string
    sample_type:
      description: A single character code indicating the type of sample
      enum:
        - C
        - D
        - G
        - O
        - P
        - R
        - X
      type: string
    subproject:
      description:
        A secondary name given to a Project to distinguish it from Projects that
        share its name.
      example: PCGP
      type: string
    suite_name:
      description: The name of a Suite
      example: default_GRCh37-lite_genome
      type: string
    target_name:
      description: The name used to refer to a target
      example: WHOLE_GENOME
      type: string
    tartan_identifier:
      description: The string identifier used to indicate which tartan is being used
      example: central
      type: string
    username:
      description: The name of a Person
      type: string
    # Standard response schemas
    Success:
      type: object
      properties:
        data:
          type: object
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
        returnCode:
          type: integer
    Paginated:
      type: object
      properties:
        links:
          type: object
          properties:
            first:
              type: string
              description: A uri for the first page of results
            last:
              type: string
              description: A uri for the last page of results
            prev:
              type: string
              description: A uri for the previous page of results
              example: null
            next:
              type: string
              description: A uri for the next page of results
        meta:
          type: object
          properties:
            current_page:
              type: integer
              description: The current page number of results
              example: 1
            from:
              type: integer
              example: 1
              description: The index of the first entry of the current page
            last_page:
              type: integer
              example: 100
              description: The number of pages of results
            path:
              type: string
              description: The uri used to get this page of results
            per_page:
              type: integer
              description: The number of results per page
            to:
              type: integer
              description: The index of the last result of the current page
              example: 15
            total:
              type: integer
              description: The total number of results available for the request
              example: 1500
